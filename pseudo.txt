n = número de vértices na primeira partição de G
m = número de vértices na segunda partição de G
Crie uma matriz vazia de dimensões (n+1) x (m+1)

// Passo 1: Inicialização
Para cada aresta (u, v) em G, onde u é um vértice da primeira partição e v é um vértice da segunda partição:
    v[u][v] = peso da aresta (u, v)
--------------------------------------------------
// Passo 2: Redução
    Para i de 1 a n:
        encontre o menor valor em cada linha i da matriz v
        subtraia esse valor de cada elemento na linha i
    
    Para j de 1 a m:
        encontre o menor valor em cada coluna j da matriz v
        subtraia esse valor de cada elemento na coluna j
--------------------------------------------------
// Passo 3: Emparelhamento
    Crie um vetor de emparelhamentos M de tamanho n+1, inicializado com valores nulos
    
    Enquanto existirem vértices livres na primeira partição:
        Crie um vetor de visitados de tamanho n+1, inicializado com valores falsos
        Encontre um vértice livre u na primeira partição
        Se EncontrarEmparelhamento(u, M, v, visitados) for verdadeiro:
            Atualize o emparelhamento
---------------------------------------------------
// Passo 4: Cálculo do custo
    custo = 0
    Para i de 1 a n:
        Para j de 1 a m:
            Se M[i] = j (há uma aresta entre o vértice i da primeira partição e o vértice j da segunda partição no emparelhamento):
                custo += v[i][j]
    
    Retorne o emparelhamento M e o custo

-----------------------------------------------------------------------------------------------------------------------------------------
Função EncontrarEmparelhamento(u, M, v, visitados):
    Para v de 1 a m:
        Se v[u][v] = 0 (há uma aresta entre u e v no grafo original) e visitados[v] for falso:
            Marque visitados[v] como verdadeiro
            Se M[v] for nulo ou EncontrarEmparelhamento(M[v], M, v, visitados) for verdadeiro:
                Atualize o emparelhamento M
                Retorne verdadeiro
    retorne falso